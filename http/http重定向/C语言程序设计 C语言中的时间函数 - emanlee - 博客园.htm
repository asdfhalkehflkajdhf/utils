<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>C语言程序设计 C语言中的时间函数 - emanlee - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=5bITb1XmtieJKhNy3HCsng1mgkC1fjWAtqCxIQA888c1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/Custom/style.css?id=20131027"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/16876.css?v=lTEOnuMw7LEPyQBRCIhSeddHKs8%3d"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/emanlee/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/emanlee/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/emanlee/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'emanlee';</script>
<script src="/bundles/blog-common.js?v=u1AiBrSeUR117oqQTNbORaLk0NsMoQO-C0ST0VrTysU1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/emanlee/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/emanlee/">EmanLee, Eman Lee's Space (blog, website) </a></h1>
<h2>EmanLee, Eman Lee's Space (blog, website) </h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/emanlee/">首页</a></li>
<li><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://www.cnblogs.com/emanlee/admin/EditPosts.aspx?opt=1">新随笔</a></li>
<li></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/emanlee/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/emanlee/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://www.cnblogs.com/emanlee/admin/EditPosts.aspx">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 1290&nbsp;
文章- 1&nbsp;
评论- 172&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/emanlee/archive/2007/10/23/935356.html">C语言程序设计 C语言中的时间函数</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><h3>Ｃ语言中关于时间的函数</h3>
<p>本文从介绍基础概念入手，探讨了在C/C++中对日期和时间操作所用到的数据结构和函数，并对计时、时间的获取、时间的计算和显示格式等方面进行了阐述。本文还通过大量的实例向你展示了time.h头文件中声明的各种函数和数据结构的详细使用方法。 </p>
<p>关键字：UTC（世界标准时间），Calendar Time（日历时间），epoch（时间点），clock tick（时钟计时单元） </p>
<div class="log2">
<p>1．概念 <br />
在C/C++中，对字符串的操作有很多值得注意的问题，同样，C/C++对时间的操作也有许多值得大家注意的地方。最近，在技术群中有很多网友也多次问到过C++语言中对时间的操作、获取和显示等等的问题。下面，在这篇文章中，笔者将主要介绍在C/C++中时间和日期的使用方法. </p>
<p>通过学习许多C/C++库，你可以有很多操作、使用时间的方法。但在这之前你需要了解一些&#8220;时间&#8221;和&#8220;日期&#8221;的概念，主要有以下几个： </p>
<p>Coordinated Universal Time（UTC）：协调世界时，又称为世界标准时间，也就是大家所熟知的格林威治标准时间（Greenwich Mean Time，GMT）。比如，中国内地的时间与UTC的时差为+8，也就是UTC+8。美国是UTC-5。 </p>
<p>Calendar Time：日历时间，是用&#8220;从一个标准时间点到此时的时间经过的秒数&#8221;来表示的时间。这个标准时间点对不同的编译器来说会有所不同，但对一个编译系统来说，这个标准时间点是不变的，该编译系统中的时间对应的日历时间都通过该标准时间点来衡量，所以可以说日历时间是&#8220;相对时间&#8221;，但是无论你在哪一个时区，在同一时刻对同一个标准时间点来说，日历时间都是一样的。 </p>
<p>epoch：时间点。时间点在标准C/C++中是一个整数，它用此时的时间和标准时间点相差的秒数（即日历时间）来表示。 </p>
<p>clock tick：时钟计时单元（而不把它叫做时钟滴答次数），一个时钟计时单元的时间长短是由CPU控制的。一个clock tick不是CPU的一个时钟周期，而是C/C++的一个基本计时单位。 </p>
<p>我们可以使用ANSI标准库中的time.h头文件。这个头文件中定义的时间和日期所使用的方法，无论是在结构定义，还是命名，都具有明显的C语言风格。下面，我将说明在C/C++中怎样使用日期的时间功能。 </p>
<p>2． 计时 </p>
<p>C/C++中的计时函数是clock()，而与其相关的数据类型是clock_t。在MSDN中，查得对clock函数定义如下： </p>
<p>clock_t clock( void ); </p>
<p>这个函数返回从&#8220;开启这个程序进程&#8221;到&#8220;程序中调用clock()函数&#8221;时之间的CPU时钟计时单元（clock tick）数，在MSDN中称之为挂钟时间（wal-clock）。其中clock_t是用来保存时间的数据类型，在time.h文件中，我们可以找到对它的定义： </p>
<p>#ifndef _CLOCK_T_DEFINED <br />
typedef long clock_t; <br />
#define _CLOCK_T_DEFINED <br />
#endif </p>
<p>很明显，clock_t是一个长整形数。在time.h文件中，还定义了一个常量CLOCKS_PER_SEC，它用来表示一秒钟会有多少个时钟计时单元，其定义如下： </p>
<p>#define CLOCKS_PER_SEC ((clock_t)1000) </p>
<p>可以看到每过千分之一秒（1毫秒），调用clock（）函数返回的值就加1。下面举个例子，你可以使用公式clock()/CLOCKS_PER_SEC来计算一个进程自身的运行时间： </p>
<p>void elapsed_time() <br />
{ <br />
printf("Elapsed time:%u secs.\n",clock()/CLOCKS_PER_SEC); <br />
} </p>
<p>当然，你也可以用clock函数来计算你的机器运行一个循环或者处理其它事件到底花了多少时间： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;测量一个事件持续的时间</span><span style="color: #008000">*/</span><span style="color: #000000">&nbsp;<br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(&nbsp;</span><span style="color: #0000ff">void</span><span style="color: #000000">&nbsp;)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">long</span><span style="color: #000000">&nbsp;i&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">10000000L</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;clock_t&nbsp;start,&nbsp;finish;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">double</span><span style="color: #000000">&nbsp;duration;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;测量一个事件持续的时间</span><span style="color: #008000">*/</span><span style="color: #000000">&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">Time&nbsp;to&nbsp;do&nbsp;%ld&nbsp;empty&nbsp;loops&nbsp;is&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">,&nbsp;i&nbsp;);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;start&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;clock();&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">while</span><span style="color: #000000">(&nbsp;i</span><span style="color: #000000">--</span><span style="color: #000000">&nbsp;)&nbsp;;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;finish&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;clock();&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;duration&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">double</span><span style="color: #000000">)(finish&nbsp;</span><span style="color: #000000">-</span><span style="color: #000000">&nbsp;start)&nbsp;</span><span style="color: #000000">/</span><span style="color: #000000">&nbsp;CLOCKS_PER_SEC;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">%f&nbsp;seconds\n</span><span style="color: #000000">"</span><span style="color: #000000">,&nbsp;duration&nbsp;);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;system(</span><span style="color: #000000">"</span><span style="color: #000000">pause</span><span style="color: #000000">"</span><span style="color: #000000">);&nbsp;<br />
}&nbsp;<br />
</span></div>
<p>在笔者的机器上，运行结果如下： </p>
<p>Time to do 10000000 empty loops is 0.03000 seconds </p>
<p>上面我们看到时钟计时单元的长度为1毫秒，那么计时的精度也为1毫秒，那么我们可不可以通过改变CLOCKS_PER_SEC的定义，通过把它定义的大一些，从而使计时精度更高呢？通过尝试，你会发现这样是不行的。在标准C/C++中，最小的计时单位是一毫秒。 </p>
<p>3．与日期和时间相关的数据结构 </p>
<p>在标准C/C++中，我们可通过tm结构来获得日期和时间，tm结构在time.h中的定义如下： </p>
<p>#ifndef _TM_DEFINED <br />
struct tm { <br />
int tm_sec; /* 秒 &#8211; 取值区间为[0,59] */ <br />
int tm_min; /* 分 - 取值区间为[0,59] */ <br />
int tm_hour; /* 时 - 取值区间为[0,23] */ <br />
int tm_mday; /* 一个月中的日期 - 取值区间为[1,31] */ <br />
int tm_mon; /* 月份（从一月开始，0代表一月） - 取值区间为[0,11] */ <br />
int tm_year; /* 年份，其值等于实际年份减去1900 */ <br />
int tm_wday; /* 星期 &#8211; 取值区间为[0,6]，其中0代表星期天，1代表星期一，以此类推 */ <br />
int tm_yday; /* 从每年的1月1日开始的天数 &#8211; 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推 */ <br />
int tm_isdst; /* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的进候，tm_isdst为0；不了解情况时，tm_isdst()为负。*/ <br />
}; <br />
#define _TM_DEFINED <br />
#endif </p>
<p>ANSI C标准称使用tm结构的这种时间表示为分解时间(broken-down time)。 </p>
<p>而日历时间（Calendar Time）是通过time_t数据类型来表示的，用time_t表示的时间（日历时间）是从一个时间点（例如：1970年1月1日0时0分0秒）到此时的秒数。在time.h中，我们也可以看到time_t是一个长整型数： </p>
<p>#ifndef _TIME_T_DEFINED <br />
typedef long time_t; /* 时间值 */ <br />
#define _TIME_T_DEFINED /* 避免重复定义 time_t */ <br />
#endif </p>
<p>大家可能会产生疑问：既然time_t实际上是长整型，到未来的某一天，从一个时间点（一般是1970年1月1日0时0分0秒）到那时的秒数（即日历时间）超出了长整形所能表示的数的范围怎么办？对time_t数据类型的值来说，它所表示的时间不能晚于2038年1月18日19时14分07秒。为了能够表示更久远的时间，一些编译器厂商引入了64位甚至更长的整形数来保存日历时间。比如微软在Visual C++中采用了__time64_t数据类型来保存日历时间，并通过_time64()函数来获得日历时间（而不是通过使用32位字的time()函数），这样就可以通过该数据类型保存3001年1月1日0时0分0秒（不包括该时间点）之前的时间。 </p>
<p>在time.h头文件中，我们还可以看到一些函数，它们都是以time_t为参数类型或返回值类型的函数： </p>
<p>double difftime(time_t time1, time_t time0); <br />
time_t mktime(struct tm * timeptr); <br />
time_t time(time_t * timer); <br />
char * asctime(const struct tm * timeptr); <br />
char * ctime(const time_t *timer); </p>
<p>此外，time.h还提供了两种不同的函数将日历时间（一个用time_t表示的整数）转换为我们平时看到的把年月日时分秒分开显示的时间格式tm： </p>
<p>struct tm * gmtime(const time_t *timer); <br />
struct tm * localtime(const time_t * timer); </p>
<p>通过查阅MSDN，我们可以知道Microsoft C/C++ 7.0中时间点的值（time_t对象的值）是从1899年12月31日0时0分0秒到该时间点所经过的秒数，而其它各种版本的Microsoft C/C++和所有不同版本的Visual C++都是计算的从1970年1月1日0时0分0秒到该时间点所经过的秒数。 </p>
<p>4．与日期和时间相关的函数及应用 <br />
在本节，我将向大家展示怎样利用time.h中声明的函数对时间进行操作。这些操作包括取当前时间、计算时间间隔、以不同的形式显示时间等内容。 </p>
<p>4.1 获得日历时间 </p>
<p>我们可以通过time()函数来获得日历时间（Calendar Time），其原型为： </p>
<p>time_t time(time_t * timer); </p>
<p>如果你已经声明了参数timer，你可以从参数timer返回现在的日历时间，同时也可以通过返回值返回现在的日历时间，即从一个时间点（例如：1970年1月1日0时0分0秒）到现在此时的秒数。如果参数为空（NUL），函数将只通过返回值返回现在的日历时间，比如下面这个例子用来显示当前的日历时间： </p>
<p>运行的结果与当时的时间有关，我当时运行的结果是： <br />
</p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;lt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;lt&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span style="color: #000000">"</span><span style="color: #000000">The&nbsp;Calendar&nbsp;Time&nbsp;now&nbsp;is&nbsp;%d\n</span><span style="color: #000000">"</span><span style="color: #000000">,lt);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;</span></div>
<p>The Calendar Time now is 1122707619 </p>
<p>其中1122707619就是我运行程序时的日历时间。即从1970年1月1日0时0分0秒到此时的秒数。 </p>
<p>4.2 获得日期和时间 </p>
<p>这里说的日期和时间就是我们平时所说的年、月、日、时、分、秒等信息。从第2节我们已经知道这些信息都保存在一个名为tm的结构体中，那么如何将一个日历时间保存为一个tm结构的对象呢？ </p>
<p>其中可以使用的函数是gmtime()和localtime()，这两个函数的原型为： </p>
<p>struct tm * gmtime(const time_t *timer); <br />
struct tm * localtime(const time_t * timer); </p>
<p>其中gmtime()函数是将日历时间转化为世界标准时间（即格林尼治时间），并返回一个tm结构体来保存这个时间，而localtime()函数是将日历时间转化为本地时间。比如现在用gmtime()函数获得的世界标准时间是2005年7月30日7点18分20秒，那么我用localtime()函数在中国地区获得的本地时间会比世界标准时间晚8个小时，即2005年7月30日15点18分20秒。下面是个例子： <br />
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">本地时间,世界标准时间</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">struct</span><span style="color: #000000">&nbsp;tm&nbsp;</span><span style="color: #000000">*</span><span style="color: #000000">local;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;t;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;t</span><span style="color: #000000">=</span><span style="color: #000000">time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;local</span><span style="color: #000000">=</span><span style="color: #000000">localtime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">t);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span style="color: #000000">"</span><span style="color: #000000">Local&nbsp;hour&nbsp;is:&nbsp;%d:%d:%d\n</span><span style="color: #000000">"</span><span style="color: #000000">,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_hour,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_min,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_sec);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;local</span><span style="color: #000000">=</span><span style="color: #000000">gmtime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">t);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span style="color: #000000">"</span><span style="color: #000000">UTC&nbsp;hour&nbsp;is:&nbsp;&nbsp;%d:%d:%d\n</span><span style="color: #000000">"</span><span style="color: #000000">,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_hour,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_min,local</span><span style="color: #000000">-&gt;</span><span style="color: #000000">tm_sec);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;<br />
<br />
</span></div>
<p><br />
运行结果是：&nbsp; </p>
<p><span style="font-size: 9pt">Local hour is: 23:17:47</span></p>
<p><span style="font-size: 9pt">UTC hour is:&nbsp;15:17:47</span></p>
<p>4.3 固定的时间格式 </p>
<p>我们可以通过asctime()函数和ctime()函数将时间以固定的格式显示出来，两者的返回值都是char*型的字符串。返回的时间格式为： </p>
<p>星期几 月份 日期 时:分:秒 年\n\0 <br />
例如：Wed Jan 02 02:03:55 1980\n\0 </p>
<p>其中\n是一个换行符，\0是一个空字符，表示字符串结束。下面是两个函数的原型： </p>
<p>char * asctime(const struct tm * timeptr); <br />
char * ctime(const time_t *timer); </p>
<p>其中asctime()函数是通过tm结构来生成具有固定格式的保存时间信息的字符串，而ctime()是通过日历时间来生成时间字符串。这样的话，asctime（）函数只是把tm结构对象中的各个域填到时间字符串的相应位置就行了，而ctime（）函数需要先参照本地的时间设置，把日历时间转化为本地时间，然后再生成格式化后的字符串。在下面，如果t是一个非空的time_t变量的话，那么： </p>
<p>printf(ctime(&amp;t)); </p>
<p>等价于： </p>
<p>struct tm *ptr; <br />
ptr=localtime(&amp;t); <br />
printf(asctime(ptr)); </p>
<p>那么，下面这个程序的两条printf语句输出的结果就是不同的了（除非你将本地时区设为世界标准时间所在的时区）： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">本地时间,世界标准时间</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">struct</span><span style="color: #000000">&nbsp;tm&nbsp;</span><span style="color: #000000">*</span><span style="color: #000000">ptr;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;lt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;lt&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;ptr</span><span style="color: #000000">=</span><span style="color: #000000">gmtime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">lt);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(asctime(ptr));&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(ctime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">lt));&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;<br />
<br />
<br />
<br />
</span></div>
<p>运行结果： </p>
<p>Sat Jul 30 08:43:03 2005 <br />
Sat Jul 30 16:43:03 2005 </p>
<p>4.4 自定义时间格式 </p>
<p>我们可以使用strftime（）函数将时间格式化为我们想要的格式。它的原型如下： </p>
<p>size_t strftime( <br />
char *strDest, <br />
size_t maxsize, <br />
const char *format, <br />
const struct tm *timeptr <br />
); </p>
<p>我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。 </p>
<p>函数strftime()的操作有些类似于sprintf()：识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方法。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。 </p>
<p>%a 星期几的简写 <br />
%A 星期几的全称 <br />
%b 月分的简写 <br />
%B 月份的全称 <br />
%c 标准的日期的时间串 <br />
%C 年份的后两位数字 <br />
%d 十进制表示的每月的第几天 <br />
%D 月/天/年 <br />
%e 在两字符域中，十进制表示的每月的第几天 <br />
%F 年-月-日 <br />
%g 年份的后两位数字，使用基于周的年 <br />
%G 年分，使用基于周的年 <br />
%h 简写的月份名 <br />
%H 24小时制的小时 <br />
%I 12小时制的小时 <br />
%j 十进制表示的每年的第几天 <br />
%m 十进制表示的月份 <br />
%M 十时制表示的分钟数 <br />
%n 新行符 <br />
%p 本地的AM或PM的等价显示 <br />
%r 12小时的时间 <br />
%R 显示小时和分钟：hh:mm <br />
%S 十进制的秒数 <br />
%t 水平制表符 <br />
%T 显示时分秒：hh:mm:ss <br />
%u 每周的第几天，星期一为第一天 （值从0到6，星期一为0） <br />
%U 第年的第几周，把星期日做为第一天（值从0到53） <br />
%V 每年的第几周，使用基于周的年 <br />
%w 十进制表示的星期几（值从0到6，星期天为0） <br />
%W 每年的第几周，把星期一做为第一天（值从0到53） <br />
%x 标准的日期串 <br />
%X 标准的时间串 <br />
%y 不带世纪的十进制年份（值从0到99） <br />
%Y 带世纪部分的十进制年份 <br />
%z，%Z 时区名称，如果不能得到时区名称则返回空字符。 <br />
%% 百分号 </p>
<p>如果想显示现在是几点了，并以12小时制显示，就象下面这段程序： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">显示现在是几点了，并以12小时制显示</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">struct</span><span style="color: #000000">&nbsp;tm&nbsp;</span><span style="color: #000000">*</span><span style="color: #000000">ptr;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;localTime;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">char</span><span style="color: #000000">&nbsp;str[</span><span style="color: #000000">80</span><span style="color: #000000">];&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;localTime</span><span style="color: #000000">=</span><span style="color: #000000">time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;ptr</span><span style="color: #000000">=</span><span style="color: #000000">localtime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">localTime);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;strftime(str,</span><span style="color: #000000">100</span><span style="color: #000000">,</span><span style="color: #000000">"</span><span style="color: #000000">It&nbsp;is&nbsp;now&nbsp;%I&nbsp;%p\n</span><span style="color: #000000">"</span><span style="color: #000000">,ptr);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(str);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;<br />
</span></div>
<p>其运行结果为： <br />
It is now 4PM </p>
<p>而下面的程序则显示当前的完整日期： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">显示当前的完整日期</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
<br />
</span><span style="color: #0000ff">void</span><span style="color: #000000">&nbsp;main(&nbsp;</span><span style="color: #0000ff">void</span><span style="color: #000000">&nbsp;)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">struct</span><span style="color: #000000">&nbsp;tm&nbsp;</span><span style="color: #000000">*</span><span style="color: #000000">newtime;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">char</span><span style="color: #000000">&nbsp;tmpbuf[</span><span style="color: #000000">128</span><span style="color: #000000">];&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;localTime1;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time(&nbsp;</span><span style="color: #000000">&amp;</span><span style="color: #000000">localTime1&nbsp;);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;newtime</span><span style="color: #000000">=</span><span style="color: #000000">localtime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">localTime1);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;strftime(&nbsp;tmpbuf,&nbsp;</span><span style="color: #000000">128</span><span style="color: #000000">,&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">Today&nbsp;is&nbsp;%A,&nbsp;day&nbsp;%d&nbsp;of&nbsp;%B&nbsp;in&nbsp;the&nbsp;year&nbsp;%Y.\n</span><span style="color: #000000">"</span><span style="color: #000000">,&nbsp;newtime);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(tmpbuf);&nbsp;<br />
}&nbsp;<br />
<br />
<br />
</span></div>
<p>运行结果： </p>
<p>Today is Saturday, day 30 of July in the year 2005. </p>
<p>4.5 计算持续时间的长度 </p>
<p>有时候在实际应用中要计算一个事件持续的时间长度，比如计算打字速度。在第1节计时部分中，我已经用clock函数举了一个例子。Clock()函数可以精确到毫秒级。同时，我们也可以使用difftime()函数，但它只能精确到秒。该函数的定义如下： </p>
<p>double difftime(time_t time1, time_t time0); </p>
<p>虽然该函数返回的以秒计算的时间间隔是double类型的，但这并不说明该时间具有同double一样的精确度，这是由它的参数觉得的（time_t是以秒为单位计算的）。比如下面一段程序： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">计算持续时间的长度&nbsp;</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;start,end;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;start&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;system(</span><span style="color: #000000">"</span><span style="color: #000000">pause</span><span style="color: #000000">"</span><span style="color: #000000">);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;</span><span style="color: #000000">=</span><span style="color: #000000">&nbsp;time(NULL);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span style="color: #000000">"</span><span style="color: #000000">The&nbsp;pause&nbsp;used&nbsp;%f&nbsp;seconds.\n</span><span style="color: #000000">"</span><span style="color: #000000">,difftime(end,start));</span><span style="color: #008000">//</span><span style="color: #008000">&lt;-&nbsp;</span><span style="color: #008000"><br />
</span><span style="color: #000000">&nbsp;&nbsp;&nbsp;&nbsp;system(</span><span style="color: #000000">"</span><span style="color: #000000">pause</span><span style="color: #000000">"</span><span style="color: #000000">);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;<br />
<br />
<br />
</span></div>
<p>运行结果为： <br />
请按任意键继续. . . <br />
The pause used 2.000000 seconds. <br />
请按任意键继续. . . </p>
<p>可以想像，暂停的时间并不那么巧是整整2秒钟。其实，你将上面程序的带有&#8220;//&lt;-&#8221;注释的一行用下面的一行代码替换： </p>
<p>printf("The pause used %f seconds.\n",end-start); </p>
<p>其运行结果是一样的。 </p>
<p>4.6 分解时间转化为日历时间 </p>
<p>这里说的分解时间就是以年、月、日、时、分、秒等分量保存的时间结构，在C/C++中是tm结构。我们可以使用mktime（）函数将用tm结构表示的时间转化为日历时间。其函数原型如下： </p>
<p>time_t mktime(struct tm * timeptr); </p>
<p>其返回值就是转化后的日历时间。这样我们就可以先制定一个分解时间，然后对这个时间进行操作了，下面的例子可以计算出1997年7月1日是星期几： </p>
<p>&nbsp;</p>
<div style="border-right: #cccccc 1px solid; padding-right: 5px; border-top: #cccccc 1px solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left: #cccccc 1px solid; width: 98%; word-break: break-all; padding-top: 4px; border-bottom: #cccccc 1px solid; background-color: #eeeeee"><span style="color: #008000">//</span><span style="color: #008000">计算出1997年7月1日是星期几&nbsp;</span><span style="color: #008000"><br />
/*</span><span style="color: #008000">&nbsp;Date&nbsp;:&nbsp;10/24/2007&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000">&nbsp;Author:&nbsp;Eman&nbsp;Lee&nbsp;&nbsp;</span><span style="color: #008000">*/</span><span style="color: #000000"><br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdio.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">stdlib.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
#include&nbsp;</span><span style="color: #000000">"</span><span style="color: #000000">time.h</span><span style="color: #000000">"</span><span style="color: #000000">&nbsp;<br />
</span><span style="color: #0000ff">int</span><span style="color: #000000">&nbsp;main(</span><span style="color: #0000ff">void</span><span style="color: #000000">)&nbsp;<br />
{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">struct</span><span style="color: #000000">&nbsp;tm&nbsp;time;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;t_of_day;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_year</span><span style="color: #000000">=</span><span style="color: #000000">1997</span><span style="color: #000000">-</span><span style="color: #000000">1900</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_mon</span><span style="color: #000000">=</span><span style="color: #000000">6</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_mday</span><span style="color: #000000">=</span><span style="color: #000000">1</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_hour</span><span style="color: #000000">=</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_min</span><span style="color: #000000">=</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_sec</span><span style="color: #000000">=</span><span style="color: #000000">1</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;time.tm_isdst</span><span style="color: #000000">=</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;t_of_day</span><span style="color: #000000">=</span><span style="color: #000000">mktime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">time);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;printf(ctime(</span><span style="color: #000000">&amp;</span><span style="color: #000000">t_of_day));&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">return</span><span style="color: #000000">&nbsp;</span><span style="color: #000000">0</span><span style="color: #000000">;&nbsp;<br />
}&nbsp;<br />
</span></div>
<p>运行结果： <br />
Tue Jul 01 00:00:01 1997 <br />
现在注意了，有了mktime()函数，是不是我们可以操作现在之前的任何时间呢？你可以通过这种办法算出1945年8月15号是星期几吗？答案是否定的。因为这个时间在1970年1月1日之前，所以在大多数编译器中，这样的程序虽然可以编译通过，但运行时会异常终止。<br />
from: <font face="Courier New">http://www.blog.edu.cn/user4/maitao1030/archives/2007/1650477.shtml</font></p>
</div>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2007-10-23 23:30</span> <a href='http://www.cnblogs.com/emanlee/'>emanlee</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://www.cnblogs.com/emanlee/admin/EditPosts.aspx?postid=935356" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(935356);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=16876,cb_entryId=935356,cb_blogApp=currentBlogApp,cb_blogUserGuid='564e360b-63cf-dd11-9e4d-001cf0cd104b',cb_entryCreatedDate='2007/10/23 23:30:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<script type="text/javascript">
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
fixPostBodyFormat();
loadAdUnderPost();
</script>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
loadBlogSignature();
LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
</script>
<script type="text/javascript">
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
			<div id="blog-calendar" style="displya:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2013 emanlee
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<script type="text/javascript" src="http://common.cnblogs.com/script/google-analytics.js"></script>
</body>
</html>
